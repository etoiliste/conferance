<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   applicationComplete="application1_applicationCompleteHandler(event)" xmlns:myComponents="myComponents.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.containers.Panel;
			import mx.controls.Alert;
			import mx.controls.VideoDisplay;
			import mx.core.Container;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import org.conferance.client.Client;
			import org.conferance.container.ContainerArea;
			
			private var userList:Array = new Array();
			private var roomList:Array = new Array();
			private var netConnection:NetConnection; 
			private var camera:Camera;
			private var microphone:Microphone;
			private var outStream:NetStream;
			private var clients:ArrayCollection = new ArrayCollection(); 
			private var h264VideoStreamSettings:H264VideoStreamSettings; 
			public static const RESIZE_CLICK:String = "resizeClick";
			protected var resizingPanel:Panel; 
			protected var initX:Number;
			protected var initY:Number;
			private var containerArea:ContainerArea;
			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{ 
				containerArea = new ContainerArea(systemManager,stage);
				addElement(containerArea.getContainer()); 
				netConnection = new NetConnection();
				netConnection.connect("rtmp://localhost/VideoChat");
				netConnection.addEventListener(NetStatusEvent.NET_STATUS,function(event:NetStatusEvent):void{
					log.appendText(event.info.code+"\n");
				}); 
				
				getRoomList();
			}
 
			public function changeVideoQuality():void 
			{  
				h264VideoStreamSettings = new H264VideoStreamSettings();  
				var camBandWidth:Number = 0; 
				var camQualityPersentage:Number = 90; 
				var camFPS:Number = 20; 
				var camKeyFrameInterval:Number = 35; 
				var camWidth:Number = 480; 
				var camHeight:Number = 360;  
				h264VideoStreamSettings.setProfileLevel(H264Profile.MAIN, H264Level.LEVEL_3_1); 
				camWidth = 320; 
				camHeight = 240; 
				camFPS = 15; 
				camKeyFrameInterval = 20; 
				camQualityPersentage = 80; 
				camBandWidth = 0; 
				
				camera.setQuality(camBandWidth, camQualityPersentage); 
				camera.setMode(camWidth,camHeight,camFPS); 
				camera.setKeyFrameInterval(camKeyFrameInterval); 
				camera.setLoopback(false);  
				h264VideoStreamSettings.setQuality(camBandWidth,camQualityPersentage); 
				h264VideoStreamSettings.setKeyFrameInterval(camKeyFrameInterval); 
				h264VideoStreamSettings.setMode(camWidth,camWidth,camFPS); 
				outStream.attachCamera(camera); 
				outStream.videoStreamSettings = h264VideoStreamSettings; 
			}
			public function getRoomList():void{
				var nr:Responder = new Responder(roomListEvent);
				netConnection.call("getRoomNames", nr);
			}
			public function roomListEvent(serverResult:Object):void{
				roomList = new Array();
				var roomListServer:Array = serverResult.toString().split("#");  
				for (var i:int = 0; i < roomListServer.length; i++) 
				{
					roomList.push({roomName:roomListServer[i].toString()});
					
				}
				lsRoomList.dataProvider = roomList;
				lsRoomList.labelField = "roomName";
			}
			private function createRoom():void{
				var nr:Responder = new Responder(function(serverResult:Object):void{
					log.appendText("server result " + serverResult);						
				});
				netConnection.call("createRoom", nr, txRoomName.text);
				txRoomName.text = "";
				getRoomList();
			}
			private function roomSelectedChange():void{
				getUserList();
			}
			public function join():void{
				if(lsRoomList.selectedItem.roomName==""){
					Alert.show("Choose your room Please !");
				}else
				{
					var nr:Responder = new Responder(function(serverResult:Object):void{
						log.appendText("The result is " + serverResult + "\n ");
						if(serverResult.toString() == "true") publisDevice();
					});
					netConnection.call("addUser", nr,lsRoomList.selectedItem.roomName as String,txUserName.text );
					btnJoin.enabled = false;
				}
			}
			public function getUserList():void{
				var nr:Responder = new Responder(netResponderHandlerUserList);
				netConnection.call("getUserList", nr, lsRoomList.selectedItem.roomName as String);
			}
			public function netResponderHandlerUserList(serverResult:Object):void{
				userList = new Array();
				var userListServer:Array = serverResult.toString().split("#");
				log.appendText("The result is " + roomList[1] + "\n ");
				for (var i:int = 0; i < userListServer.length; i++) 
				{
					userList.push({userName:userListServer[i]});
					
				}
				lsUserList.dataProvider = userList;
				lsUserList.labelField = "userName";
			}
			public function publisDevice():void{
				camera = Camera.getCamera(); 
				
				microphone = Microphone.getEnhancedMicrophone();
				var options:MicrophoneEnhancedOptions = microphone.enhancedOptions; 
				options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
				options.echoPath = 128; 
				options.nonLinearProcessing = true;
				
				microphone.enhancedOptions = options; 
				microphone.setSilenceLevel(0, 2000);
				//_microphone.noiseSuppressionLevel = -30;
				microphone.encodeQuality = 10;
				microphone.rate = 44;
				microphone.framesPerPacket = 2;
				microphone.gain = 50;  
				microphone.codec = SoundCodec.SPEEX; 
				
				outStream = new NetStream(netConnection);
				outStream.addEventListener(NetStatusEvent.NET_STATUS,function(event:NetStatusEvent):void{
					log.appendText(event.info.code+"\n");
				});
				changeVideoQuality();
				outStream.attachAudio(microphone); 
				outStream.publish(txUserName.text);
			}
			private var lastX:int = 0;
			private var lastY:int = 10;
			
			public function playStream():void{ 
				var client:Client = new Client(netConnection,lsUserList.selectedItem.userName as String,
					150,150,lastX,0,this,containerArea);
				containerArea.createPanel(client);
				clients.addItem({toStreamName:lsUserList.selectedItem.userName, object:client});  
				lastX += 170;
				
			}
			public function videoClickEvent(clientName:String):void{
				var vido:Video = getClient(clientName).object.getVideo();
			 
			}
			 
			public function getClient(searchUser:String):Object{
				var obj:Object;
				for (var i:int = 0; i < clients.length; i++) 
				{
					if(clients[i].toStreamName == searchUser){
						obj = clients[i];
					} 
				} 
				return obj;
			}
			private function remove(toStreamName:String): void {
				for (var j:int = 0; j < clients.length; j++) {
					if(clients[j].toStreamName == toStreamName) {
						clients.removeItemAt(j);  
						log.appendText(clients[j].toStreamName + "\n");
					}
				}  
			}
			private function userListASd():void{
				for (var j:int = 0; j < clients.length; j++) {  
					log.appendText(clients[j].toStreamName + "\n"); 
				}
			}
			 
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations> 
	<mx:Canvas y="10" right="0" width="388" height="563">
		<mx:List id="lsRoomList" x="10" y="81" height="162" change="roomSelectedChange()"></mx:List>
		<mx:List id="lsUserList" x="180" y="81" height="162" change="playStream()"></mx:List>
		<s:TextInput id="txUserName" x="60" y="10"/>
		<s:Label x="-28" y="20" text="UserName&#xd;"/>
		<s:Button id="btnJoin" x="124" y="40" label="Join" click="join()"/>
		<s:Label  y="269" text="Create Room&#xd;"/>
		<s:TextInput id="txRoomName" x="83" y="251"/>
		<s:Button  y="289" label="CreateRoom" click="createRoom()"/>
		<s:Button x="91" y="289" label="RefreshRoomName" click="getRoomList()"/>
		<s:Button x="129" y="323" label="GetUserlist" click="userListASd()"/> 
		<s:TextArea id="log" x="10" y="394"/>
	</mx:Canvas>
	 
	<!--<s:VideoDisplay id="videoFrame" x="10" y="10" width="634" height="271"/>-->
</s:Application>
